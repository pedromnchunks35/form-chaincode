// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger/fabric-chaincode-go/shim (interfaces: ChaincodeStubInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	shim "github.com/hyperledger/fabric-chaincode-go/shim"
	peer "github.com/hyperledger/fabric-protos-go/peer"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// MockChaincodeStubInterface is a mock of ChaincodeStubInterface interface.
type MockChaincodeStubInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChaincodeStubInterfaceMockRecorder
}

// MockChaincodeStubInterfaceMockRecorder is the mock recorder for MockChaincodeStubInterface.
type MockChaincodeStubInterfaceMockRecorder struct {
	mock *MockChaincodeStubInterface
}

// NewMockChaincodeStubInterface creates a new mock instance.
func NewMockChaincodeStubInterface(ctrl *gomock.Controller) *MockChaincodeStubInterface {
	mock := &MockChaincodeStubInterface{ctrl: ctrl}
	mock.recorder = &MockChaincodeStubInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChaincodeStubInterface) EXPECT() *MockChaincodeStubInterfaceMockRecorder {
	return m.recorder
}

// CreateCompositeKey mocks base method.
func (m *MockChaincodeStubInterface) CreateCompositeKey(arg0 string, arg1 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompositeKey", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompositeKey indicates an expected call of CreateCompositeKey.
func (mr *MockChaincodeStubInterfaceMockRecorder) CreateCompositeKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompositeKey", reflect.TypeOf((*MockChaincodeStubInterface)(nil).CreateCompositeKey), arg0, arg1)
}

// DelPrivateData mocks base method.
func (m *MockChaincodeStubInterface) DelPrivateData(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelPrivateData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelPrivateData indicates an expected call of DelPrivateData.
func (mr *MockChaincodeStubInterfaceMockRecorder) DelPrivateData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelPrivateData", reflect.TypeOf((*MockChaincodeStubInterface)(nil).DelPrivateData), arg0, arg1)
}

// DelState mocks base method.
func (m *MockChaincodeStubInterface) DelState(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelState indicates an expected call of DelState.
func (mr *MockChaincodeStubInterfaceMockRecorder) DelState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelState", reflect.TypeOf((*MockChaincodeStubInterface)(nil).DelState), arg0)
}

// GetArgs mocks base method.
func (m *MockChaincodeStubInterface) GetArgs() [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArgs")
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetArgs indicates an expected call of GetArgs.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArgs", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetArgs))
}

// GetArgsSlice mocks base method.
func (m *MockChaincodeStubInterface) GetArgsSlice() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArgsSlice")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArgsSlice indicates an expected call of GetArgsSlice.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetArgsSlice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArgsSlice", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetArgsSlice))
}

// GetBinding mocks base method.
func (m *MockChaincodeStubInterface) GetBinding() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinding")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBinding indicates an expected call of GetBinding.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetBinding() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinding", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetBinding))
}

// GetChannelID mocks base method.
func (m *MockChaincodeStubInterface) GetChannelID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetChannelID indicates an expected call of GetChannelID.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetChannelID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelID", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetChannelID))
}

// GetCreator mocks base method.
func (m *MockChaincodeStubInterface) GetCreator() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreator")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreator indicates an expected call of GetCreator.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetCreator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreator", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetCreator))
}

// GetDecorations mocks base method.
func (m *MockChaincodeStubInterface) GetDecorations() map[string][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecorations")
	ret0, _ := ret[0].(map[string][]byte)
	return ret0
}

// GetDecorations indicates an expected call of GetDecorations.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetDecorations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecorations", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetDecorations))
}

// GetFunctionAndParameters mocks base method.
func (m *MockChaincodeStubInterface) GetFunctionAndParameters() (string, []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFunctionAndParameters")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// GetFunctionAndParameters indicates an expected call of GetFunctionAndParameters.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetFunctionAndParameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunctionAndParameters", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetFunctionAndParameters))
}

// GetHistoryForKey mocks base method.
func (m *MockChaincodeStubInterface) GetHistoryForKey(arg0 string) (shim.HistoryQueryIteratorInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryForKey", arg0)
	ret0, _ := ret[0].(shim.HistoryQueryIteratorInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryForKey indicates an expected call of GetHistoryForKey.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetHistoryForKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryForKey", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetHistoryForKey), arg0)
}

// GetPrivateData mocks base method.
func (m *MockChaincodeStubInterface) GetPrivateData(arg0, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateData", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateData indicates an expected call of GetPrivateData.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetPrivateData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateData", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetPrivateData), arg0, arg1)
}

// GetPrivateDataByPartialCompositeKey mocks base method.
func (m *MockChaincodeStubInterface) GetPrivateDataByPartialCompositeKey(arg0, arg1 string, arg2 []string) (shim.StateQueryIteratorInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateDataByPartialCompositeKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(shim.StateQueryIteratorInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateDataByPartialCompositeKey indicates an expected call of GetPrivateDataByPartialCompositeKey.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetPrivateDataByPartialCompositeKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateDataByPartialCompositeKey", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetPrivateDataByPartialCompositeKey), arg0, arg1, arg2)
}

// GetPrivateDataByRange mocks base method.
func (m *MockChaincodeStubInterface) GetPrivateDataByRange(arg0, arg1, arg2 string) (shim.StateQueryIteratorInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateDataByRange", arg0, arg1, arg2)
	ret0, _ := ret[0].(shim.StateQueryIteratorInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateDataByRange indicates an expected call of GetPrivateDataByRange.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetPrivateDataByRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateDataByRange", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetPrivateDataByRange), arg0, arg1, arg2)
}

// GetPrivateDataHash mocks base method.
func (m *MockChaincodeStubInterface) GetPrivateDataHash(arg0, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateDataHash", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateDataHash indicates an expected call of GetPrivateDataHash.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetPrivateDataHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateDataHash", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetPrivateDataHash), arg0, arg1)
}

// GetPrivateDataQueryResult mocks base method.
func (m *MockChaincodeStubInterface) GetPrivateDataQueryResult(arg0, arg1 string) (shim.StateQueryIteratorInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateDataQueryResult", arg0, arg1)
	ret0, _ := ret[0].(shim.StateQueryIteratorInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateDataQueryResult indicates an expected call of GetPrivateDataQueryResult.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetPrivateDataQueryResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateDataQueryResult", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetPrivateDataQueryResult), arg0, arg1)
}

// GetPrivateDataValidationParameter mocks base method.
func (m *MockChaincodeStubInterface) GetPrivateDataValidationParameter(arg0, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateDataValidationParameter", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateDataValidationParameter indicates an expected call of GetPrivateDataValidationParameter.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetPrivateDataValidationParameter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateDataValidationParameter", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetPrivateDataValidationParameter), arg0, arg1)
}

// GetQueryResult mocks base method.
func (m *MockChaincodeStubInterface) GetQueryResult(arg0 string) (shim.StateQueryIteratorInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryResult", arg0)
	ret0, _ := ret[0].(shim.StateQueryIteratorInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryResult indicates an expected call of GetQueryResult.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetQueryResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryResult", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetQueryResult), arg0)
}

// GetQueryResultWithPagination mocks base method.
func (m *MockChaincodeStubInterface) GetQueryResultWithPagination(arg0 string, arg1 int32, arg2 string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryResultWithPagination", arg0, arg1, arg2)
	ret0, _ := ret[0].(shim.StateQueryIteratorInterface)
	ret1, _ := ret[1].(*peer.QueryResponseMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetQueryResultWithPagination indicates an expected call of GetQueryResultWithPagination.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetQueryResultWithPagination(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryResultWithPagination", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetQueryResultWithPagination), arg0, arg1, arg2)
}

// GetSignedProposal mocks base method.
func (m *MockChaincodeStubInterface) GetSignedProposal() (*peer.SignedProposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignedProposal")
	ret0, _ := ret[0].(*peer.SignedProposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignedProposal indicates an expected call of GetSignedProposal.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetSignedProposal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignedProposal", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetSignedProposal))
}

// GetState mocks base method.
func (m *MockChaincodeStubInterface) GetState(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetState), arg0)
}

// GetStateByPartialCompositeKey mocks base method.
func (m *MockChaincodeStubInterface) GetStateByPartialCompositeKey(arg0 string, arg1 []string) (shim.StateQueryIteratorInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateByPartialCompositeKey", arg0, arg1)
	ret0, _ := ret[0].(shim.StateQueryIteratorInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateByPartialCompositeKey indicates an expected call of GetStateByPartialCompositeKey.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetStateByPartialCompositeKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateByPartialCompositeKey", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetStateByPartialCompositeKey), arg0, arg1)
}

// GetStateByPartialCompositeKeyWithPagination mocks base method.
func (m *MockChaincodeStubInterface) GetStateByPartialCompositeKeyWithPagination(arg0 string, arg1 []string, arg2 int32, arg3 string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateByPartialCompositeKeyWithPagination", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(shim.StateQueryIteratorInterface)
	ret1, _ := ret[1].(*peer.QueryResponseMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStateByPartialCompositeKeyWithPagination indicates an expected call of GetStateByPartialCompositeKeyWithPagination.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetStateByPartialCompositeKeyWithPagination(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateByPartialCompositeKeyWithPagination", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetStateByPartialCompositeKeyWithPagination), arg0, arg1, arg2, arg3)
}

// GetStateByRange mocks base method.
func (m *MockChaincodeStubInterface) GetStateByRange(arg0, arg1 string) (shim.StateQueryIteratorInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateByRange", arg0, arg1)
	ret0, _ := ret[0].(shim.StateQueryIteratorInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateByRange indicates an expected call of GetStateByRange.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetStateByRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateByRange", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetStateByRange), arg0, arg1)
}

// GetStateByRangeWithPagination mocks base method.
func (m *MockChaincodeStubInterface) GetStateByRangeWithPagination(arg0, arg1 string, arg2 int32, arg3 string) (shim.StateQueryIteratorInterface, *peer.QueryResponseMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateByRangeWithPagination", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(shim.StateQueryIteratorInterface)
	ret1, _ := ret[1].(*peer.QueryResponseMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStateByRangeWithPagination indicates an expected call of GetStateByRangeWithPagination.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetStateByRangeWithPagination(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateByRangeWithPagination", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetStateByRangeWithPagination), arg0, arg1, arg2, arg3)
}

// GetStateValidationParameter mocks base method.
func (m *MockChaincodeStubInterface) GetStateValidationParameter(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateValidationParameter", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateValidationParameter indicates an expected call of GetStateValidationParameter.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetStateValidationParameter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateValidationParameter", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetStateValidationParameter), arg0)
}

// GetStringArgs mocks base method.
func (m *MockChaincodeStubInterface) GetStringArgs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringArgs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetStringArgs indicates an expected call of GetStringArgs.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetStringArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringArgs", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetStringArgs))
}

// GetTransient mocks base method.
func (m *MockChaincodeStubInterface) GetTransient() (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransient")
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransient indicates an expected call of GetTransient.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetTransient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransient", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetTransient))
}

// GetTxID mocks base method.
func (m *MockChaincodeStubInterface) GetTxID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTxID indicates an expected call of GetTxID.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetTxID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxID", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetTxID))
}

// GetTxTimestamp mocks base method.
func (m *MockChaincodeStubInterface) GetTxTimestamp() (*timestamppb.Timestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxTimestamp")
	ret0, _ := ret[0].(*timestamppb.Timestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxTimestamp indicates an expected call of GetTxTimestamp.
func (mr *MockChaincodeStubInterfaceMockRecorder) GetTxTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxTimestamp", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetTxTimestamp))
}

// InvokeChaincode mocks base method.
func (m *MockChaincodeStubInterface) InvokeChaincode(arg0 string, arg1 [][]byte, arg2 string) peer.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeChaincode", arg0, arg1, arg2)
	ret0, _ := ret[0].(peer.Response)
	return ret0
}

// InvokeChaincode indicates an expected call of InvokeChaincode.
func (mr *MockChaincodeStubInterfaceMockRecorder) InvokeChaincode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeChaincode", reflect.TypeOf((*MockChaincodeStubInterface)(nil).InvokeChaincode), arg0, arg1, arg2)
}

// PurgePrivateData mocks base method.
func (m *MockChaincodeStubInterface) PurgePrivateData(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgePrivateData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgePrivateData indicates an expected call of PurgePrivateData.
func (mr *MockChaincodeStubInterfaceMockRecorder) PurgePrivateData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgePrivateData", reflect.TypeOf((*MockChaincodeStubInterface)(nil).PurgePrivateData), arg0, arg1)
}

// PutPrivateData mocks base method.
func (m *MockChaincodeStubInterface) PutPrivateData(arg0, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPrivateData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutPrivateData indicates an expected call of PutPrivateData.
func (mr *MockChaincodeStubInterfaceMockRecorder) PutPrivateData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPrivateData", reflect.TypeOf((*MockChaincodeStubInterface)(nil).PutPrivateData), arg0, arg1, arg2)
}

// PutState mocks base method.
func (m *MockChaincodeStubInterface) PutState(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutState indicates an expected call of PutState.
func (mr *MockChaincodeStubInterfaceMockRecorder) PutState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutState", reflect.TypeOf((*MockChaincodeStubInterface)(nil).PutState), arg0, arg1)
}

// SetEvent mocks base method.
func (m *MockChaincodeStubInterface) SetEvent(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEvent indicates an expected call of SetEvent.
func (mr *MockChaincodeStubInterfaceMockRecorder) SetEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEvent", reflect.TypeOf((*MockChaincodeStubInterface)(nil).SetEvent), arg0, arg1)
}

// SetPrivateDataValidationParameter mocks base method.
func (m *MockChaincodeStubInterface) SetPrivateDataValidationParameter(arg0, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrivateDataValidationParameter", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPrivateDataValidationParameter indicates an expected call of SetPrivateDataValidationParameter.
func (mr *MockChaincodeStubInterfaceMockRecorder) SetPrivateDataValidationParameter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrivateDataValidationParameter", reflect.TypeOf((*MockChaincodeStubInterface)(nil).SetPrivateDataValidationParameter), arg0, arg1, arg2)
}

// SetStateValidationParameter mocks base method.
func (m *MockChaincodeStubInterface) SetStateValidationParameter(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStateValidationParameter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStateValidationParameter indicates an expected call of SetStateValidationParameter.
func (mr *MockChaincodeStubInterfaceMockRecorder) SetStateValidationParameter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStateValidationParameter", reflect.TypeOf((*MockChaincodeStubInterface)(nil).SetStateValidationParameter), arg0, arg1)
}

// SplitCompositeKey mocks base method.
func (m *MockChaincodeStubInterface) SplitCompositeKey(arg0 string) (string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitCompositeKey", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SplitCompositeKey indicates an expected call of SplitCompositeKey.
func (mr *MockChaincodeStubInterfaceMockRecorder) SplitCompositeKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitCompositeKey", reflect.TypeOf((*MockChaincodeStubInterface)(nil).SplitCompositeKey), arg0)
}
