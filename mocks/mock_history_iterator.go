// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger/fabric-chaincode-go/shim (interfaces: HistoryQueryIteratorInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	queryresult "github.com/hyperledger/fabric-protos-go/ledger/queryresult"
)

// MockHistoryQueryIteratorInterface is a mock of HistoryQueryIteratorInterface interface.
type MockHistoryQueryIteratorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryQueryIteratorInterfaceMockRecorder
}

// MockHistoryQueryIteratorInterfaceMockRecorder is the mock recorder for MockHistoryQueryIteratorInterface.
type MockHistoryQueryIteratorInterfaceMockRecorder struct {
	mock *MockHistoryQueryIteratorInterface
}

// NewMockHistoryQueryIteratorInterface creates a new mock instance.
func NewMockHistoryQueryIteratorInterface(ctrl *gomock.Controller) *MockHistoryQueryIteratorInterface {
	mock := &MockHistoryQueryIteratorInterface{ctrl: ctrl}
	mock.recorder = &MockHistoryQueryIteratorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryQueryIteratorInterface) EXPECT() *MockHistoryQueryIteratorInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockHistoryQueryIteratorInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockHistoryQueryIteratorInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockHistoryQueryIteratorInterface)(nil).Close))
}

// HasNext mocks base method.
func (m *MockHistoryQueryIteratorInterface) HasNext() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNext")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNext indicates an expected call of HasNext.
func (mr *MockHistoryQueryIteratorInterfaceMockRecorder) HasNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNext", reflect.TypeOf((*MockHistoryQueryIteratorInterface)(nil).HasNext))
}

// Next mocks base method.
func (m *MockHistoryQueryIteratorInterface) Next() (*queryresult.KeyModification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*queryresult.KeyModification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockHistoryQueryIteratorInterfaceMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockHistoryQueryIteratorInterface)(nil).Next))
}
