// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger/fabric-chaincode-go/shim (interfaces: StateQueryIteratorInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	queryresult "github.com/hyperledger/fabric-protos-go/ledger/queryresult"
)

// MockStateQueryIteratorInterface is a mock of StateQueryIteratorInterface interface.
type MockStateQueryIteratorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStateQueryIteratorInterfaceMockRecorder
}

// MockStateQueryIteratorInterfaceMockRecorder is the mock recorder for MockStateQueryIteratorInterface.
type MockStateQueryIteratorInterfaceMockRecorder struct {
	mock *MockStateQueryIteratorInterface
}

// NewMockStateQueryIteratorInterface creates a new mock instance.
func NewMockStateQueryIteratorInterface(ctrl *gomock.Controller) *MockStateQueryIteratorInterface {
	mock := &MockStateQueryIteratorInterface{ctrl: ctrl}
	mock.recorder = &MockStateQueryIteratorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateQueryIteratorInterface) EXPECT() *MockStateQueryIteratorInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStateQueryIteratorInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStateQueryIteratorInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStateQueryIteratorInterface)(nil).Close))
}

// HasNext mocks base method.
func (m *MockStateQueryIteratorInterface) HasNext() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasNext")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasNext indicates an expected call of HasNext.
func (mr *MockStateQueryIteratorInterfaceMockRecorder) HasNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasNext", reflect.TypeOf((*MockStateQueryIteratorInterface)(nil).HasNext))
}

// Next mocks base method.
func (m *MockStateQueryIteratorInterface) Next() (*queryresult.KV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*queryresult.KV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockStateQueryIteratorInterfaceMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockStateQueryIteratorInterface)(nil).Next))
}
